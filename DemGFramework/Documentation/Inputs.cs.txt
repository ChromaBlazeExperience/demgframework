In questo file di INPUT dovrebbe creare le callback degli input che il gioco puÃ² avere, legate a delle Action
che poi una volta agganciate da un altro file creano l'iterazione fra input->logiche

---------------

using System;
using UnityEngine;
using UnityEngine.InputSystem;
using static CUtility.Utility;

namespace Player
{
    [Serializable]
    public class PlayerInput
    {
        public Inputs_CC inputs; //file input di unity, compilato
        public bool legacyInput = true;

        #region ACTIONS
        public Vector3Action movementAction;
        public Vector3Action lookAction;
        public VoidAction jumpAction;
        public VoidAction doubleJumpAction;
        public VoidAction startSlideAction;
        public VoidAction stopSlideAction;
        public VoidAction primaryAttackAction;
        public VoidAction stopPrimaryAttackAction;
        public VoidAction smashAttackAction;
    #endregion

        private bool initialized = false;

        #region CONFIGURATION
            public void Clear()
            {
                if (legacyInput) return;

                inputs.Player.Move.performed -= NI_Movement;
                inputs.Player.Move.canceled -= NI_Movement;

                inputs.Player.Jump.performed -= NI_Jump;
                inputs.Player.Jump.performed -= NI_DoubleJump;

                inputs.Player.Look.performed -= NI_Look;
                inputs.Player.Look.canceled -= NI_Look;

                inputs.Player.Crouch.performed -= NI_StartSlide;
                inputs.Player.Crouch.canceled -= NI_StopSlide;

                inputs.Player.AttackPrimary.performed -= NI_PrimaryAttack;
                inputs.Player.AttackPrimary.canceled -= NI_StopPrimaryAttack;

                inputs.Player.Q.performed -= NI_SmashAttack;
            }
            public void Enable()
            {
                if (legacyInput) return;

                if(!initialized)
                {
                    inputs = new Inputs_CC();
                    inputs.Player.Move.performed += NI_Movement;
                    inputs.Player.Move.canceled += NI_Movement;

                    inputs.Player.Jump.performed += NI_Jump;
                    inputs.Player.Jump.performed += NI_DoubleJump;

                    inputs.Player.Look.performed += NI_Look;
                    inputs.Player.Look.canceled += NI_Look;

                    inputs.Player.Crouch.performed += NI_StartSlide;
                    inputs.Player.Crouch.canceled += NI_StopSlide;

                    inputs.Player.AttackPrimary.performed += NI_PrimaryAttack;
                    inputs.Player.AttackPrimary.canceled += NI_StopPrimaryAttack;

                    inputs.Player.Q.performed += NI_SmashAttack;

                    initialized = true;
                }
                inputs.Enable();
            }
            public void Disable()
            {
                if (legacyInput) return;

                inputs.Disable();
            }
        #endregion

        #region LEGACY INPUTS
            public void Update()
            {
                if(legacyInput)
                {
                    CalculateLegacyInput();
                }
            }
            private void CalculateLegacyInput()
            {
                MovementInput();
                JumpInput();
                LookInput();
                SlideInput();
                AttackInput();
                SmashAttackInput();
            }
            private void JumpInput()
            {
                if(Input.GetKey(KeyCode.Space))
                {
                    InvokeJump();
                }
                if(Input.GetKeyDown(KeyCode.Space))
                {
                    InvokeDoubleJump();
                }
            }
            private void MovementInput()
            {
                float horizontal = Input.GetAxisRaw("Horizontal");
                float vertical = Input.GetAxisRaw("Vertical");

                InvokeMovement(new Vector3(horizontal, 0, vertical).normalized);
            }
            private void LookInput()
            {
                float mouseX = Input.GetAxisRaw("Mouse X");
                float mouseY = Input.GetAxisRaw("Mouse Y");

                InvokeLook(new Vector2(mouseX, mouseY));
            }
            private void SlideInput()
            {
                if(Input.GetKey(KeyCode.C)) InvokeStartSlide();
                else InvokeStopSlide();
            }
            private void AttackInput()
            {
                if(Input.GetKeyDown(KeyCode.Mouse0))
                {
                    InvokePrimaryAttack();
                }
                if(Input.GetKeyUp(KeyCode.Mouse0))
                {
                    InvokeStopPrimaryAttack();
                }
            }
            private void SmashAttackInput()
            {
                if(Input.GetKeyDown(KeyCode.Q))
                {
                    InvokeSmashAttack();
                }
            }
        #endregion

        #region NEW INPUTS
            private void NI_Movement(InputAction.CallbackContext ctx)
            {
                Vector2 value = ctx.ReadValue<Vector2>();
                Vector3 direction = new Vector3(value.x, 0, value.y);
                InvokeMovement(direction);
            }
            private void NI_Jump(InputAction.CallbackContext ctx)
            {
                InvokeJump();
            }
            private void NI_DoubleJump(InputAction.CallbackContext ctx)
            {
                InvokeDoubleJump();
            }
            private void NI_Look(InputAction.CallbackContext ctx)
            {
                InvokeLook(ctx.ReadValue<Vector2>());
            }
            private void NI_StartSlide(InputAction.CallbackContext ctx)
            {
                InvokeStartSlide();
            }
            private void NI_StopSlide(InputAction.CallbackContext ctx)
            {
                InvokeStopSlide();
            }
            private void NI_PrimaryAttack(InputAction.CallbackContext ctx)
            {
                InvokePrimaryAttack();
            }
            private void NI_StopPrimaryAttack(InputAction.CallbackContext ctx)
            {
                InvokeStopPrimaryAttack();
            }
            private void NI_SmashAttack(InputAction.CallbackContext ctx)
            {
                InvokeSmashAttack();
            }
        #endregion

        #region INVOKE ACTIONS
            private void InvokeMovement(Vector3 value)
            {
                movementAction?.Invoke(value);
            }
            private void InvokeJump()
            {
                jumpAction?.Invoke();
            }
            private void InvokeDoubleJump()
            {
                doubleJumpAction?.Invoke();
            }
            private void InvokeLook(Vector3 value)
            {
                lookAction?.Invoke(value);
            }
            private void InvokeStartSlide()
            {
                startSlideAction?.Invoke();
            }
            private void InvokeStopSlide()
            {
                stopSlideAction?.Invoke();
            }
            private void InvokePrimaryAttack()
            {
                primaryAttackAction?.Invoke();
            }
            private void InvokeStopPrimaryAttack()
            {
                stopPrimaryAttackAction?.Invoke();
            }
            private void InvokeSmashAttack()
        {
            smashAttackAction?.Invoke();
        }
        #endregion
    }
}
